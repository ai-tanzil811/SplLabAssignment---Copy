//ASAHRAFUL ISLAM TANZIL 0112230028
#include <stdio.h>
#include <string.h>
#ifdef _WIN32
#include <Windows.h>
#else
#include <unistd.h>
#endif

#define MAX_DONORS 100

typedef struct {
    char name[50];
    int age;
    char number[20];
    char bloodGroup[5];
} DONOR;

DONOR donors[MAX_DONORS];
int number_of_donors = 0;

void clearConsole() {
#ifdef _WIN32
    system("cls");
#else
    printf("\e[1;1H\e[2J");
#endif
}

void saveToFile(DONOR donor[]) {
    FILE *file = fopen("donors.txt", "w");
    if (file == NULL) {
        printf("Error opening file for writing.\n");
        return;
    }

    for (int i = 0; i < number_of_donors; i++) {
        fprintf(file, "%s\n%d\n%s\n%s\n",
                donor[i].name,
                donor[i].age,
                donor[i].number,
                donor[i].bloodGroup);
    }

    fclose(file);
    printf("Data saved to file.\n");
}

void loadFromFile(DONOR donor[]) {
    FILE *file = fopen("donors.txt", "r");
    if (file == NULL) {
        printf("Error opening file for reading.\n");
        return;
    }

    int i = 0;
    while (i < MAX_DONORS &&
           fgets(donor[i].name, sizeof(donor[i].name), file) != NULL &&
           fscanf(file, "%d\n", &donor[i].age) == 1 &&
           fgets(donor[i].number, sizeof(donor[i].number), file) != NULL &&
           fgets(donor[i].bloodGroup, sizeof(donor[i].bloodGroup), file) != NULL) {
        donor[i].name[strcspn(donor[i].name, "\n")] = '\0';
        donor[i].number[strcspn(donor[i].number, "\n")] = '\0';
        donor[i].bloodGroup[strcspn(donor[i].bloodGroup, "\n")] = '\0';
        i++;
    }

    number_of_donors = i;
    fclose(file);
    printf("Data loaded from file.\n");
}

void add(DONOR donor[])
{
    
    if (number_of_donors >= MAX_DONORS)
    {
        printf("\n Maximum number of donors reached");
        return;
    }
    printf("\n Enter name: ");
    fgets(donor[number_of_donors].name, 50, stdin);
    donor[number_of_donors].name[strcspn(donor[number_of_donors].name, "\n")] = '\0';
    printf("\n Enter age: ");
    scanf("%d", &donor[number_of_donors].age);
    getchar();
    printf("\n Enter phone number:");
    fgets(donor[number_of_donors].number, 20, stdin);
    donor[number_of_donors].number[strcspn(donor[number_of_donors].number, "\n")] = '\0';
    printf("\n Enter blood group: (CAPITAL LETTERS) :");
    fgets(donor[number_of_donors].bloodGroup, 5, stdin);
    donor[number_of_donors].bloodGroup[strcspn(donor[number_of_donors].bloodGroup, "\n")] = '\0';
    number_of_donors++;
    printf("\n Record added\n\n");
    saveToFile(donor);
}

void update(DONOR donor[])
{
    int i, found = 0;
    char number_str[20];
    printf("\n Enter phone number of donor to update: ");
    fgets(number_str, 20, stdin);
    number_str[strcspn(number_str, "\n")] = '\0';
    for (i = 0; i < number_of_donors; i++)
    {
        if (strcmp(donor[i].number, number_str) == 0)
        {
            found = 1;
            break;
        }
    }
    if (found == 1)
    {
        printf("\n Update record for for donor %d: ", i + 1);
        printf("\n Enter name: ");
        fgets(donor[i].name, 50, stdin);
        donor[i].name[strcspn(donor[i].name, "\n")] = '\0';
        printf("\n Enter age: ");
        scanf("%d", &donor[i].age);
        getchar();
        printf("\n Enter phone number: ");
        fgets(donor[i].number, 20, stdin);
        donor[i].number[strcspn(donor[i].number, "\n")] = '\0';
        printf("\n Enter blood group: (CAPITAL LETTERS) : ");
        fgets(donor[i].bloodGroup, 5, stdin);
        donor[i].bloodGroup[strcspn(donor[i].bloodGroup, "\n")] = '\0';
        printf("\n Record updated\n\n");
    }
    else
    {
        printf("\n No donor found with phone number %s", number_str);
    }
}

void delete(DONOR donor[])
{
    int i, j, found = 0;
    char number_str[20];
    printf("\n Enter phone number of donor to delete: ");
    fgets(number_str, 20, stdin);
    number_str[strcspn(number_str, "\n")] = '\0';
    for (i = 0; i < number_of_donors; i++)
    {
        if (strcmp(donor[i].number, number_str) == 0)
        {
            found = 1;
            break;
        }
    }
    if (found)
    {
        printf("\n Delete record for donor %d: ", i + 1);
        for (j = i; j < number_of_donors - 1; j++)
        {
            donor[j] = donor[j + 1];
        }
        number_of_donors--;
        printf("\n Record deleted\n\n");
    }
    else
    {
        printf("\n No donor found with phone number %s", number_str);
    }
}

void list(DONOR donor[])
{
    int i;
    printf("\n Donor list:\n");
    printf("____________________________________\n");
    for (i = 0; i < number_of_donors; i++)
    {
        printf("\n Donor no : %d", i + 1);
        printf("\n Name: %s", donor[i].name);
        printf("\n Age: %d", donor[i].age);
        printf("\n Phone number: %s", donor[i].number);
        printf("\n Blood group: %s", donor[i].bloodGroup);
        printf("\n\n");
    }
}

void search(DONOR donor[])
{
    int i, found = 0;
    char bloodGroup_str[5];
    printf("\n Enter blood group to search: ");
    fgets(bloodGroup_str, 5, stdin);
    bloodGroup_str[strcspn(bloodGroup_str, "\n")] = '\0';
    for (i = 0; i < number_of_donors; i++)
    {
        if (strcmp(donor[i].bloodGroup, bloodGroup_str) == 0)
        {
            found = 1;
            break;
        }
    }
    if (found == 1)
    {
        printf("\n Donor no : %d", i + 1);
        printf("\n Name: %s", donor[i].name);
        printf("\n Age: %d", donor[i].age);
        printf("\n Phone number: %s", donor[i].number);
        printf("\n Blood group: %s", donor[i].bloodGroup);
        printf("\n\n");
    }
    else
    {
        printf("\n No donor found with blood group %s", bloodGroup_str);
    }
}
int main() {
    int choice;
    loadFromFile(donors);

    do {
        clearConsole();
        printf("__________________________________________________________________________________________\n");
        printf("\t\t\t\t\t* Blood Donor Management System Menu *\n");
        printf("__________________________________________________________________________________________\n");
        printf("\n 1. Add donor");
        printf("\n 2. Update donor");
        printf("\n 3. Delete donor");
        printf("\n 4. List donors");
        printf("\n 5. Search donor by blood group");
        printf("\n 6. File (Load/Save)");
        printf("\n 7. Exit");
        printf("\n Enter your choice: ");
        scanf("%d", &choice);
        getchar();

        switch (choice) {
            case 1:
                clearConsole();
                add(donors);
                break;
            case 2:
            update(donors);
            break;
        case 3:
            delete (donors);
            break;
        case 4:
            list(donors);
            break;
        case 5:
            search(donors);
            break;
            case 6:
                clearConsole();
                printf("__________________________________________________________________________________________\n");
                printf("\t\t\t\t\t* File Management *\n");
                printf("__________________________________________________________________________________________\n");
                printf("\n 1. Load data from file");
                printf("\n 2. Save data to file");
                printf("\n 3. Back to main menu");
                printf("\n Enter your choice: ");
                int fileOption;
                scanf("%d", &fileOption);
                getchar();

                switch (fileOption) {
                    case 1:
                        loadFromFile(donors);
                        break;
                    case 2:
                        saveToFile(donors);
                        break;
                    case 3:
                        break; 
                    default:
                        printf("\n Invalid choice. Please try again.\n");
                        break;
                }
                break;
            case 7:
                clearConsole();
                saveToFile(donors);
                printf("\n Exiting...\n");
                return 0;
            default:
                printf("\n Invalid choice. Please try again.\n");
                break;
        }
        printf("\n Press Enter to continue...");
        getchar();
    } while (choice != 7);

    return 0;
}
